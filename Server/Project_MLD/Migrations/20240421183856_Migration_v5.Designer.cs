// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project_MLD.Models;

#nullable disable

namespace Project_MLD.Migrations
{
    [DbContext(typeof(MldDatabaseContext))]
    [Migration("20240421183856_Migration_v5")]
    partial class Migration_v5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Project_MLD.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("created_by");

                    b.Property<DateOnly?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<int?>("LoginAttempt")
                        .HasColumnType("int")
                        .HasColumnName("login_attempt");

                    b.Property<DateTime?>("LoginLast")
                        .HasColumnType("datetime")
                        .HasColumnName("login_last");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("username");

                    b.HasKey("AccountId");

                    b.HasIndex("RoleId");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("GradeId")
                        .HasColumnType("int")
                        .HasColumnName("grade_ id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int?>("TotalStudent")
                        .HasColumnType("int")
                        .HasColumnName("total_student");

                    b.Property<int?>("TotalStudentSelectedTopics")
                        .HasColumnType("int")
                        .HasColumnName("total_student_selected_topics");

                    b.HasKey("Id")
                        .HasName("PK_Lớp");

                    b.HasIndex("GradeId");

                    b.ToTable("Class", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.CurriculumDistribution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_Phân phối chương trình");

                    b.ToTable("Curriculum Distribution", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.Document1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApproveBy")
                        .HasColumnType("int")
                        .HasColumnName("approve_by");

                    b.Property<DateOnly?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<int>("GradeId")
                        .HasColumnType("int")
                        .HasColumnName("grade_id");

                    b.Property<int?>("IsApprove")
                        .HasColumnType("int")
                        .HasColumnName("isApprove");

                    b.Property<string>("LinkFile")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("link_file");

                    b.Property<string>("LinkImage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("link_image");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<string>("OtherTasks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("other_tasks");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("subject_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_Kế Hoạch Dạy Học");

                    b.HasIndex("GradeId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Document 1", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.Document1CurriculumDistribution", b =>
                {
                    b.Property<int>("Document1Id")
                        .HasColumnType("int")
                        .HasColumnName("document1_id");

                    b.Property<int>("CurriculumId")
                        .HasColumnType("int")
                        .HasColumnName("curriculum_id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int>("Slot")
                        .HasColumnType("int")
                        .HasColumnName("slot");

                    b.HasKey("Document1Id", "CurriculumId");

                    b.HasIndex("CurriculumId");

                    b.ToTable("Document1_CurriculumDistribution", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.Document1SelectedTopic", b =>
                {
                    b.Property<int>("Document1Id")
                        .HasColumnType("int")
                        .HasColumnName("document1_id");

                    b.Property<int>("SelectedTopicsId")
                        .HasColumnType("int")
                        .HasColumnName("selected_topics_id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int?>("Slot")
                        .HasColumnType("int")
                        .HasColumnName("slot");

                    b.HasKey("Document1Id", "SelectedTopicsId");

                    b.HasIndex("SelectedTopicsId");

                    b.ToTable("Document1_SelectedTopics", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.Document1SubjectRoom", b =>
                {
                    b.Property<int>("SubjectRoomId")
                        .HasColumnType("int")
                        .HasColumnName("subject_room_id");

                    b.Property<int>("Document1Id")
                        .HasColumnType("int")
                        .HasColumnName("document1_id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("SubjectRoomId", "Document1Id");

                    b.HasIndex("Document1Id");

                    b.ToTable("Document1_Subject Room", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.Document1TeachingEquipment", b =>
                {
                    b.Property<int>("Document1Id")
                        .HasColumnType("int")
                        .HasColumnName("document1_id");

                    b.Property<int>("TeachingEquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("teaching_equipment_id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Document1Id", "TeachingEquipmentId");

                    b.HasIndex("TeachingEquipmentId");

                    b.ToTable("Document1_TeachingEquipment", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.Document2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApproveBy")
                        .HasColumnType("int")
                        .HasColumnName("approve_by");

                    b.Property<DateOnly?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<int?>("IsApprove")
                        .HasColumnType("int")
                        .HasColumnName("isApprove");

                    b.Property<string>("LinkFile")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("link_file");

                    b.Property<string>("LinkImage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("link_image");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_Kế hoạch Tổ chức Hoạt Động Giáo Dục");

                    b.HasIndex("UserId");

                    b.ToTable("Document 2", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.Document2Grade", b =>
                {
                    b.Property<int>("Document2Id")
                        .HasColumnType("int")
                        .HasColumnName("document2_id");

                    b.Property<int>("GradeId")
                        .HasColumnType("int")
                        .HasColumnName("grade_id");

                    b.Property<string>("CollaborateWith")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("collaborate_with");

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("condition");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int>("HostBy")
                        .HasColumnType("int")
                        .HasColumnName("host_by");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("place");

                    b.Property<int?>("Slot")
                        .HasColumnType("int")
                        .HasColumnName("slot");

                    b.Property<DateOnly?>("Time")
                        .HasColumnType("date")
                        .HasColumnName("time");

                    b.Property<string>("TitleName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title_name");

                    b.HasKey("Document2Id", "GradeId");

                    b.HasIndex("GradeId");

                    b.HasIndex("HostBy");

                    b.ToTable("Document2_Grade", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.Document3", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApproveBy")
                        .HasColumnType("int")
                        .HasColumnName("approve_by");

                    b.Property<string>("ClaasName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claas_name");

                    b.Property<DateOnly?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<int>("Document1Id")
                        .HasColumnType("int")
                        .HasColumnName("document1_id");

                    b.Property<int?>("IsApprove")
                        .HasColumnType("int")
                        .HasColumnName("isApprove");

                    b.Property<string>("LinkFile")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("link_file");

                    b.Property<string>("LinkImage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("link_image");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("OtherTasks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("other_tasks");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_Kế hoạch giáo dục của GV");

                    b.HasIndex("Document1Id");

                    b.HasIndex("UserId");

                    b.ToTable("Document 3", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.Document3CurriculumDistribution", b =>
                {
                    b.Property<int>("Document3Id")
                        .HasColumnType("int")
                        .HasColumnName("document3_id");

                    b.Property<int>("CurriculumId")
                        .HasColumnType("int")
                        .HasColumnName("curriculum_id");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("equipment_id");

                    b.Property<int?>("Slot")
                        .HasColumnType("int")
                        .HasColumnName("slot");

                    b.Property<string>("SubjectRoomName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("subject_room_name");

                    b.Property<DateOnly?>("Time")
                        .HasColumnType("date")
                        .HasColumnName("time");

                    b.HasKey("Document3Id", "CurriculumId", "EquipmentId");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("Document3_CurriculumDistribution", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.Document3SelectedTopic", b =>
                {
                    b.Property<int>("Document3Id")
                        .HasColumnType("int")
                        .HasColumnName("document3_id");

                    b.Property<int>("SelectedTopicsId")
                        .HasColumnType("int")
                        .HasColumnName("selectedTopics_id");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("equipment_id");

                    b.Property<int?>("Slot")
                        .HasColumnType("int")
                        .HasColumnName("slot");

                    b.Property<string>("SubjectRoomName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("subject_room_name");

                    b.Property<DateOnly?>("Time")
                        .HasColumnType("date")
                        .HasColumnName("time");

                    b.HasKey("Document3Id", "SelectedTopicsId", "EquipmentId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("SelectedTopicsId");

                    b.ToTable("Document3_SelectedTopics", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.Document4", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<string>("LinkFile")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("link_file");

                    b.Property<string>("LinkImage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("link_image");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<int>("TeachingPlannerId")
                        .HasColumnType("int")
                        .HasColumnName("teaching_planner_id");

                    b.HasKey("Id")
                        .HasName("PK_Phu Luc 4");

                    b.HasIndex("TeachingPlannerId");

                    b.ToTable("Document 4", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.Document5", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("Document4Id")
                        .HasColumnType("int")
                        .HasColumnName("document4_id");

                    b.Property<string>("LinkFile")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("link_file");

                    b.Property<string>("LinkImage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("link_image");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int?>("Slot")
                        .HasColumnType("int")
                        .HasColumnName("slot");

                    b.Property<int?>("Total")
                        .HasColumnType("int")
                        .HasColumnName("total");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_Phu Luc 5");

                    b.HasIndex("Document4Id");

                    b.HasIndex("UserId");

                    b.ToTable("Document 5", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.Evaluate", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Document5Id")
                        .HasColumnType("int")
                        .HasColumnName("document5_id");

                    b.Property<int?>("Evaluate11")
                        .HasColumnType("int")
                        .HasColumnName("evaluate_1_1");

                    b.Property<int?>("Evaluate12")
                        .HasColumnType("int")
                        .HasColumnName("evaluate_1_2");

                    b.Property<int?>("Evaluate13")
                        .HasColumnType("int")
                        .HasColumnName("evaluate_1_3");

                    b.Property<int?>("Evaluate14")
                        .HasColumnType("int")
                        .HasColumnName("evaluate_1_4");

                    b.Property<int?>("Evaluate21")
                        .HasColumnType("int")
                        .HasColumnName("evaluate_2_1");

                    b.Property<int?>("Evaluate22")
                        .HasColumnType("int")
                        .HasColumnName("evaluate_2_2");

                    b.Property<int?>("Evaluate23")
                        .HasColumnType("int")
                        .HasColumnName("evaluate_2_3");

                    b.Property<int?>("Evaluate24")
                        .HasColumnType("int")
                        .HasColumnName("evaluate_2_4");

                    b.Property<int?>("Evaluate31")
                        .HasColumnType("int")
                        .HasColumnName("evaluate_3_1");

                    b.Property<int?>("Evaluate32")
                        .HasColumnType("int")
                        .HasColumnName("evaluate_3_2");

                    b.Property<int?>("Evaluate33")
                        .HasColumnType("int")
                        .HasColumnName("evaluate_3_3");

                    b.Property<int?>("Evaluate34")
                        .HasColumnType("int")
                        .HasColumnName("evaluate_3_4");

                    b.HasKey("Id");

                    b.HasIndex("Document5Id");

                    b.ToTable("Evaluate", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.FormCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_Hình thức thi");

                    b.ToTable("Form Category", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_Khối Lớp");

                    b.ToTable("Grade", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.LevelOfTrainning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_LevelOfTrainning");

                    b.ToTable("Level Of Trainning", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<string>("TitleName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title_name");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("type");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.PeriodicAssessment", b =>
                {
                    b.Property<int>("TestingCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("testing_category_id");

                    b.Property<int>("FormCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("form_category_id");

                    b.Property<int>("Document1Id")
                        .HasColumnType("int")
                        .HasColumnName("document1_id");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int?>("Time")
                        .HasColumnType("int")
                        .HasColumnName("time");

                    b.HasKey("TestingCategoryId", "FormCategoryId", "Document1Id");

                    b.HasIndex("Document1Id");

                    b.HasIndex("FormCategoryId");

                    b.ToTable("Periodic Assessment", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.ProfessionalStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Professional Standards", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.S3FileMetadatum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ExpirationDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("expiration_datetime");

                    b.Property<string>("FileKey")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file_key");

                    b.Property<string>("PresignedUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("presigned_url");

                    b.HasKey("Id");

                    b.ToTable("s3_file_metadata", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.Scorm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("content");

                    b.Property<bool?>("IsAprrove")
                        .HasColumnType("bit")
                        .HasColumnName("isAprrove");

                    b.Property<string>("LinkFile")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("link_file");

                    b.Property<string>("LinkImage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("link_image");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<int>("TeachingPlannerId")
                        .HasColumnType("int")
                        .HasColumnName("teaching_planner_id");

                    b.HasKey("Id")
                        .HasName("PK_Document");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TeachingPlannerId");

                    b.ToTable("Scorm", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.SelectedTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_Chuyên đề / Bài Học");

                    b.ToTable("Selected Topics", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.SpecializedDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_Tổ chuyên Môn");

                    b.ToTable("Specialized Department", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_Môn học");

                    b.ToTable("Subject", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.SubjectRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_Phòng Bộ Môn");

                    b.ToTable("Subject Room", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.TeachingEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_Thiết bị dậy học");

                    b.ToTable("Teaching Equipment", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.TeachingPlanner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("class_id");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("subject_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_User - Lớp - Mon");

                    b.HasIndex("ClassId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Teaching Planner", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.TestingCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_Loại Bài kiểm tra");

                    b.ToTable("Testing Category", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("created_by");

                    b.Property<DateOnly?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("full_name");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.Property<int?>("LevelOfTrainningId")
                        .HasColumnType("int")
                        .HasColumnName("level_of_trainning_id");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("modified_by");

                    b.Property<DateOnly?>("ModifiedDate")
                        .HasColumnType("date")
                        .HasColumnName("modified_date");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("photo");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("place_of_birth");

                    b.Property<int?>("ProfessionalStandardsId")
                        .HasColumnType("int")
                        .HasColumnName("professional_standards_id");

                    b.Property<int?>("SpecializedDepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("specialized_department_id");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("LevelOfTrainningId");

                    b.HasIndex("ProfessionalStandardsId");

                    b.HasIndex("SpecializedDepartmentId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Project_MLD.Models.Account", b =>
                {
                    b.HasOne("Project_MLD.Models.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Account_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Project_MLD.Models.Class", b =>
                {
                    b.HasOne("Project_MLD.Models.Grade", "Grade")
                        .WithMany("Classes")
                        .HasForeignKey("GradeId")
                        .IsRequired()
                        .HasConstraintName("FK_Class_Grade");

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("Project_MLD.Models.Document1", b =>
                {
                    b.HasOne("Project_MLD.Models.Grade", "Grade")
                        .WithMany("Document1s")
                        .HasForeignKey("GradeId")
                        .IsRequired()
                        .HasConstraintName("FK_Document 1_Grade");

                    b.HasOne("Project_MLD.Models.Subject", "Subject")
                        .WithMany("Document1s")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK_Document 1_Subject");

                    b.HasOne("Project_MLD.Models.User", "User")
                        .WithMany("Document1s")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Phu Luc 1_User");

                    b.Navigation("Grade");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project_MLD.Models.Document1CurriculumDistribution", b =>
                {
                    b.HasOne("Project_MLD.Models.CurriculumDistribution", "Curriculum")
                        .WithMany("Document1CurriculumDistributions")
                        .HasForeignKey("CurriculumId")
                        .IsRequired()
                        .HasConstraintName("FK_Document1_CurriculumDistribution_Curriculum Distribution");

                    b.HasOne("Project_MLD.Models.Document1", "Document1")
                        .WithMany("Document1CurriculumDistributions")
                        .HasForeignKey("Document1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Document1_CurriculumDistribution_Document 11");

                    b.Navigation("Curriculum");

                    b.Navigation("Document1");
                });

            modelBuilder.Entity("Project_MLD.Models.Document1SelectedTopic", b =>
                {
                    b.HasOne("Project_MLD.Models.Document1", "Document1")
                        .WithMany("Document1SelectedTopics")
                        .HasForeignKey("Document1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Document1_SelectedTopics_Document 11");

                    b.HasOne("Project_MLD.Models.SelectedTopic", "SelectedTopics")
                        .WithMany("Document1SelectedTopics")
                        .HasForeignKey("SelectedTopicsId")
                        .IsRequired()
                        .HasConstraintName("FK_Document1_SelectedTopics_Selected Topics");

                    b.Navigation("Document1");

                    b.Navigation("SelectedTopics");
                });

            modelBuilder.Entity("Project_MLD.Models.Document1SubjectRoom", b =>
                {
                    b.HasOne("Project_MLD.Models.Document1", "Document1")
                        .WithMany("Document1SubjectRooms")
                        .HasForeignKey("Document1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Document1_Subject Room_Document 11");

                    b.HasOne("Project_MLD.Models.SubjectRoom", "SubjectRoom")
                        .WithMany("Document1SubjectRooms")
                        .HasForeignKey("SubjectRoomId")
                        .IsRequired()
                        .HasConstraintName("FK_Document1_Subject Room_Subject Room");

                    b.Navigation("Document1");

                    b.Navigation("SubjectRoom");
                });

            modelBuilder.Entity("Project_MLD.Models.Document1TeachingEquipment", b =>
                {
                    b.HasOne("Project_MLD.Models.Document1", "Document1")
                        .WithMany("Document1TeachingEquipments")
                        .HasForeignKey("Document1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Document1_TeachingEquipment_Document 11");

                    b.HasOne("Project_MLD.Models.TeachingEquipment", "TeachingEquipment")
                        .WithMany("Document1TeachingEquipments")
                        .HasForeignKey("TeachingEquipmentId")
                        .IsRequired()
                        .HasConstraintName("FK_Document1_TeachingEquipment_Teaching Equipment");

                    b.Navigation("Document1");

                    b.Navigation("TeachingEquipment");
                });

            modelBuilder.Entity("Project_MLD.Models.Document2", b =>
                {
                    b.HasOne("Project_MLD.Models.User", "User")
                        .WithMany("Document2s")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Kế hoạch Tổ chức Hoạt Động Giáo Dục_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project_MLD.Models.Document2Grade", b =>
                {
                    b.HasOne("Project_MLD.Models.Document2", "Document2")
                        .WithMany("Document2Grades")
                        .HasForeignKey("Document2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Document2_Grade_Document 21");

                    b.HasOne("Project_MLD.Models.Grade", "Grade")
                        .WithMany("Document2Grades")
                        .HasForeignKey("GradeId")
                        .IsRequired()
                        .HasConstraintName("FK_Document2_Grade_Grade");

                    b.HasOne("Project_MLD.Models.User", "HostByNavigation")
                        .WithMany("Document2Grades")
                        .HasForeignKey("HostBy")
                        .IsRequired()
                        .HasConstraintName("FK_Document2_Grade_User");

                    b.Navigation("Document2");

                    b.Navigation("Grade");

                    b.Navigation("HostByNavigation");
                });

            modelBuilder.Entity("Project_MLD.Models.Document3", b =>
                {
                    b.HasOne("Project_MLD.Models.Document1", "Document1")
                        .WithMany("Document3s")
                        .HasForeignKey("Document1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Document 3_Document 1");

                    b.HasOne("Project_MLD.Models.User", "User")
                        .WithMany("Document3s")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Document 3_User");

                    b.Navigation("Document1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project_MLD.Models.Document3CurriculumDistribution", b =>
                {
                    b.HasOne("Project_MLD.Models.CurriculumDistribution", "Curriculum")
                        .WithMany("Document3CurriculumDistributions")
                        .HasForeignKey("CurriculumId")
                        .IsRequired()
                        .HasConstraintName("FK_Document3_CurriculumDistribution_Curriculum Distribution");

                    b.HasOne("Project_MLD.Models.Document3", "Document3")
                        .WithMany("Document3CurriculumDistributions")
                        .HasForeignKey("Document3Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Document3_CurriculumDistribution_Document 31");

                    b.HasOne("Project_MLD.Models.TeachingEquipment", "Equipment")
                        .WithMany("Document3CurriculumDistributions")
                        .HasForeignKey("EquipmentId")
                        .IsRequired()
                        .HasConstraintName("FK_Document3_CurriculumDistribution_Teaching Equipment");

                    b.Navigation("Curriculum");

                    b.Navigation("Document3");

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("Project_MLD.Models.Document3SelectedTopic", b =>
                {
                    b.HasOne("Project_MLD.Models.Document3", "Document3")
                        .WithMany("Document3SelectedTopics")
                        .HasForeignKey("Document3Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Document3_SelectedTopics_Document 31");

                    b.HasOne("Project_MLD.Models.TeachingEquipment", "Equipment")
                        .WithMany("Document3SelectedTopics")
                        .HasForeignKey("EquipmentId")
                        .IsRequired()
                        .HasConstraintName("FK_Document3_SelectedTopics_Teaching Equipment");

                    b.HasOne("Project_MLD.Models.SelectedTopic", "SelectedTopics")
                        .WithMany("Document3SelectedTopics")
                        .HasForeignKey("SelectedTopicsId")
                        .IsRequired()
                        .HasConstraintName("FK_Document3_SelectedTopics_Selected Topics");

                    b.Navigation("Document3");

                    b.Navigation("Equipment");

                    b.Navigation("SelectedTopics");
                });

            modelBuilder.Entity("Project_MLD.Models.Document4", b =>
                {
                    b.HasOne("Project_MLD.Models.TeachingPlanner", "TeachingPlanner")
                        .WithMany("Document4s")
                        .HasForeignKey("TeachingPlannerId")
                        .IsRequired()
                        .HasConstraintName("FK_Document 4_Teaching Planner");

                    b.Navigation("TeachingPlanner");
                });

            modelBuilder.Entity("Project_MLD.Models.Document5", b =>
                {
                    b.HasOne("Project_MLD.Models.Document4", "Document4")
                        .WithMany("Document5s")
                        .HasForeignKey("Document4Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Document 5_Document 4");

                    b.HasOne("Project_MLD.Models.User", "User")
                        .WithMany("Document5s")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Document 5_User");

                    b.Navigation("Document4");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project_MLD.Models.Evaluate", b =>
                {
                    b.HasOne("Project_MLD.Models.Document5", "Document5")
                        .WithMany("Evaluates")
                        .HasForeignKey("Document5Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Evaluate_Document 5");

                    b.Navigation("Document5");
                });

            modelBuilder.Entity("Project_MLD.Models.Feedback", b =>
                {
                    b.HasOne("Project_MLD.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Feedback_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project_MLD.Models.Notification", b =>
                {
                    b.HasOne("Project_MLD.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Notification_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project_MLD.Models.PeriodicAssessment", b =>
                {
                    b.HasOne("Project_MLD.Models.Document1", "Document1")
                        .WithMany("PeriodicAssessments")
                        .HasForeignKey("Document1Id")
                        .IsRequired()
                        .HasConstraintName("FK_Periodic Assessment_Document 1");

                    b.HasOne("Project_MLD.Models.FormCategory", "FormCategory")
                        .WithMany("PeriodicAssessments")
                        .HasForeignKey("FormCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Periodic Assessment_Form Category");

                    b.HasOne("Project_MLD.Models.TestingCategory", "TestingCategory")
                        .WithMany("PeriodicAssessments")
                        .HasForeignKey("TestingCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Periodic Assessment_Testing Category");

                    b.Navigation("Document1");

                    b.Navigation("FormCategory");

                    b.Navigation("TestingCategory");
                });

            modelBuilder.Entity("Project_MLD.Models.Scorm", b =>
                {
                    b.HasOne("Project_MLD.Models.Category", "Category")
                        .WithMany("Scorms")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Doc_Category");

                    b.HasOne("Project_MLD.Models.TeachingPlanner", "TeachingPlanner")
                        .WithMany("Scorms")
                        .HasForeignKey("TeachingPlannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Scorm_Teaching Planner");

                    b.Navigation("Category");

                    b.Navigation("TeachingPlanner");
                });

            modelBuilder.Entity("Project_MLD.Models.TeachingPlanner", b =>
                {
                    b.HasOne("Project_MLD.Models.Class", "Class")
                        .WithMany("TeachingPlanners")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK_Teaching Planner_Class");

                    b.HasOne("Project_MLD.Models.Subject", "Subject")
                        .WithMany("TeachingPlanners")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK_Teaching Planner_Subject");

                    b.HasOne("Project_MLD.Models.User", "User")
                        .WithMany("TeachingPlanners")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Teaching Planner_User");

                    b.Navigation("Class");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project_MLD.Models.User", b =>
                {
                    b.HasOne("Project_MLD.Models.Account", "Account")
                        .WithMany("Users")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Account");

                    b.HasOne("Project_MLD.Models.LevelOfTrainning", "LevelOfTrainning")
                        .WithMany("Users")
                        .HasForeignKey("LevelOfTrainningId")
                        .HasConstraintName("FK_User_Level Of Trainning");

                    b.HasOne("Project_MLD.Models.ProfessionalStandard", "ProfessionalStandards")
                        .WithMany("Users")
                        .HasForeignKey("ProfessionalStandardsId")
                        .HasConstraintName("FK_User_Professional Standards");

                    b.HasOne("Project_MLD.Models.SpecializedDepartment", "SpecializedDepartment")
                        .WithMany("Users")
                        .HasForeignKey("SpecializedDepartmentId")
                        .HasConstraintName("FK_User_Specialized Department");

                    b.Navigation("Account");

                    b.Navigation("LevelOfTrainning");

                    b.Navigation("ProfessionalStandards");

                    b.Navigation("SpecializedDepartment");
                });

            modelBuilder.Entity("Project_MLD.Models.Account", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Project_MLD.Models.Category", b =>
                {
                    b.Navigation("Scorms");
                });

            modelBuilder.Entity("Project_MLD.Models.Class", b =>
                {
                    b.Navigation("TeachingPlanners");
                });

            modelBuilder.Entity("Project_MLD.Models.CurriculumDistribution", b =>
                {
                    b.Navigation("Document1CurriculumDistributions");

                    b.Navigation("Document3CurriculumDistributions");
                });

            modelBuilder.Entity("Project_MLD.Models.Document1", b =>
                {
                    b.Navigation("Document1CurriculumDistributions");

                    b.Navigation("Document1SelectedTopics");

                    b.Navigation("Document1SubjectRooms");

                    b.Navigation("Document1TeachingEquipments");

                    b.Navigation("Document3s");

                    b.Navigation("PeriodicAssessments");
                });

            modelBuilder.Entity("Project_MLD.Models.Document2", b =>
                {
                    b.Navigation("Document2Grades");
                });

            modelBuilder.Entity("Project_MLD.Models.Document3", b =>
                {
                    b.Navigation("Document3CurriculumDistributions");

                    b.Navigation("Document3SelectedTopics");
                });

            modelBuilder.Entity("Project_MLD.Models.Document4", b =>
                {
                    b.Navigation("Document5s");
                });

            modelBuilder.Entity("Project_MLD.Models.Document5", b =>
                {
                    b.Navigation("Evaluates");
                });

            modelBuilder.Entity("Project_MLD.Models.FormCategory", b =>
                {
                    b.Navigation("PeriodicAssessments");
                });

            modelBuilder.Entity("Project_MLD.Models.Grade", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Document1s");

                    b.Navigation("Document2Grades");
                });

            modelBuilder.Entity("Project_MLD.Models.LevelOfTrainning", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Project_MLD.Models.ProfessionalStandard", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Project_MLD.Models.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Project_MLD.Models.SelectedTopic", b =>
                {
                    b.Navigation("Document1SelectedTopics");

                    b.Navigation("Document3SelectedTopics");
                });

            modelBuilder.Entity("Project_MLD.Models.SpecializedDepartment", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Project_MLD.Models.Subject", b =>
                {
                    b.Navigation("Document1s");

                    b.Navigation("TeachingPlanners");
                });

            modelBuilder.Entity("Project_MLD.Models.SubjectRoom", b =>
                {
                    b.Navigation("Document1SubjectRooms");
                });

            modelBuilder.Entity("Project_MLD.Models.TeachingEquipment", b =>
                {
                    b.Navigation("Document1TeachingEquipments");

                    b.Navigation("Document3CurriculumDistributions");

                    b.Navigation("Document3SelectedTopics");
                });

            modelBuilder.Entity("Project_MLD.Models.TeachingPlanner", b =>
                {
                    b.Navigation("Document4s");

                    b.Navigation("Scorms");
                });

            modelBuilder.Entity("Project_MLD.Models.TestingCategory", b =>
                {
                    b.Navigation("PeriodicAssessments");
                });

            modelBuilder.Entity("Project_MLD.Models.User", b =>
                {
                    b.Navigation("Document1s");

                    b.Navigation("Document2Grades");

                    b.Navigation("Document2s");

                    b.Navigation("Document3s");

                    b.Navigation("Document5s");

                    b.Navigation("Feedbacks");

                    b.Navigation("Notifications");

                    b.Navigation("TeachingPlanners");
                });
#pragma warning restore 612, 618
        }
    }
}
